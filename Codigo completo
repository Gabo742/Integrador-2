#include <Keypad.h> //Libreria para utilizar el teclado 4x4
#include <LiquidCrystal_I2C.h> //Libreria para utilizar la pantalla LCD I2C
#include <Wire.h>
#include <ESP32Servo.h> //Libreria para utilizar el servo motor

int buzzerPin = 27; //asignacion de PIN del buzzer en pin 27
float sensor = 34; //asignacion de PIN del buzzer en pin 27
int lectura; //asignacion de PIN del buzzer en pin 27
int buzzerPin2 = 32; //asignacion de PIN del buzzer en pin 27
int PIR = 35; //asignacion de PIN del buzzer en pin 27
int lectura_PIR; //asignacion de PIN del buzzer en pin 27

#define ROW_NUM     4 // cuatro filas
#define COLUMN_NUM  4 // cuatro columnas

Servo servoMotor; //initializamos el servo motor

char keys[ROW_NUM][COLUMN_NUM] = {
  {'1','2','3', 'A'},
  {'4','5','6', 'B'},
  {'7','8','9', 'C'},
  {'*','0','#', 'D'}
}; //declaracion de la ubicacion de las teclas del teclado 4x4

byte pin_rows[ROW_NUM]      = {19, 18, 5, 17}; // GPIO19, GPIO18, GPIO5, GPIO17 conectan a los pines en fila
byte pin_column[COLUMN_NUM] = {16, 4, 0, 2};   // GPIO16, GPIO4, GPIO0, GPIO2 conectan a los pines en columna

Keypad keypad = Keypad(makeKeymap(keys), pin_rows, pin_column, ROW_NUM, COLUMN_NUM );
LiquidCrystal_I2C lcd(0x27, 16, 2); // La direccion del LCD I2C es 0x27, 16 columnas y 2 filas.

String password = "1234"; // Clave inicial
String enteredPassword = "";

enum States {
  AWAIT_INPUT,
  CHANGE_PASSWORD
}; //declaramos los estados del lector LCD para la activacion del servo motor
States currentState = AWAIT_INPUT;

void setup(){
  pinMode(buzzerPin, OUTPUT);
  pinMode(sensor, INPUT);
  Serial.begin(9600);
  digitalWrite(buzzerPin,LOW);

  pinMode(buzzerPin2, OUTPUT);
  pinMode(PIR, INPUT);
  digitalWrite(buzzerPin2,LOW);

  servoMotor.attach(15); //declaramos el pin del servo motor
  lcd.init(); // iniciamos la pantalla lcd
  lcd.backlight();
  lcd.print("Password:");
  servoMotor.write(0);
}

void loop(){

  lectura = analogRead(sensor);
  Serial.println(lectura);
  if(lectura < 100){
    Serial.println("Alarma LDR");
    digitalWrite(buzzerPin,HIGH);
  }else{
   digitalWrite(buzzerPin,LOW);
  }

  lectura_PIR = digitalRead(PIR);
  Serial.println(lectura_PIR);
  if(lectura_PIR == 1){
    Serial.println("Alarma PIR");
    digitalWrite(buzzerPin2,HIGH);
  }else{
   digitalWrite(buzzerPin2,LOW);
  }

  char key = keypad.getKey();

  if (key) {
    if (currentState == AWAIT_INPUT) {
      processEntry(key); //funcion para ingresar la clave
    } 
    else if (currentState == CHANGE_PASSWORD) {
      processPasswordChange(key); //funcion para cambiar la clave
    }
  }
}

void processEntry(char key) {
  if (key == 'A' ) { // ingresa la clave
    if (enteredPassword == password) {
      lcd.clear();
      lcd.print("Access granted");
      servoMotor.write(180);      
      delay(2000);
      servoMotor.write(0);
    } 
    else {
      lcd.clear();
      lcd.print("Access denied");
      delay(2000);
    }
    lcd.clear();
    lcd.print("Enter Password");
    enteredPassword = "";
  } 
  else if (key == 'B' ) { // limpia la pantalla
    enteredPassword = "";
    lcd.clear();
    lcd.setCursor(0,0);    
    lcd.print("Password:");
    lcd.setCursor(0,1);
    lcd.print(" ");
  } 
  else if (key == 'C') { // change password
    currentState = CHANGE_PASSWORD;
    lcd.clear();
    lcd.print("New Password:");
    enteredPassword = "";
  } 
  else {
    enteredPassword += key;
    lcd.setCursor(enteredPassword.length()-1,1);
    lcd.print("*");
  }
}

void processPasswordChange(char key) {
  if (key == 'A' ) { // ingrese nueva clave
    currentState = AWAIT_INPUT;
    password = enteredPassword; 
    lcd.clear();
    lcd.print("Pwd changed");
    delay(2000);
    lcd.clear();
    lcd.print("Enter Password");
    enteredPassword = "";
  } 
  else if (key == 'B' ) { // limpia la pantalla
    enteredPassword = "";
    lcd.setCursor(0,1);
    lcd.print("");
  } 
  else {
    enteredPassword += key;
    lcd.setCursor(enteredPassword.length(), 1);
    lcd.print(key);
  }
}
